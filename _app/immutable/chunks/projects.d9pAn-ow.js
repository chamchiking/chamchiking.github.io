const e=[{title:"Event Sensor Camera Development",description:"Designed a plug-and-play USB camera system using the Samsung RC1S DVS chip",shortDescription:"High-speed USB event camera system with MIPI D-PHY and embedded stack",longDescription:"This project focused on developing a high-speed neuromorphic vision camera based on Samsungâ€™s RC1S Dynamic Vision Sensor (DVS). I led the hardware and software co-design, starting with schematic capture and PCB design tailored to support a 4 Gbps MIPI CSI-2 D-PHY input. We used the Infineon CX3 USB 3.1 Gen 1 controller to interface between the DVS and the host system, acting as a MIPI-to-USB bridge. I implemented the embedded firmware in C++ using a real-time operating system (RTOS), managing MIPI stream decoding, packetization, and USB communication. On the host side, I developed a USB receiver application in C++ and Python using libusb, which performs real-time decoding of DVS event packets and streams them to the visualization pipeline. The final system achieved robust plug-and-play performance, low-latency event delivery, and was successfully demonstrated live at international academic venues. This work represents an end-to-end integration of high-speed vision hardware, embedded firmware, and host-side software, forming a scalable foundation for future DVS-based sensing platforms in robotics and computer vision.",teamRole:"Team Lead and System Architect",diagram:"",tags:["FPGA","DVS","USB 3.1","MIPI","Embedded System"],mainImage:"/conference/ISCAS_2025/DEMO/dvs_mincheol.jpg",team:2,startDate:"2022/4/12",endDate:"2022/5/20",skillset:["USB 3.1","MIPI CSI-2","Embedded C","High-Speed Interface"],results:"Successfully delivered a robust neuromorphic vision camera with stable 4 Gbps streaming and full plug-and-play support, used in academic demos and real-time research pipelines."},{title:"Development of Deep Learning Algorithms for Object Detection and Tracking in Unmanned Stores",description:"Improved YOLOv3 performance for unmanned stores with innovative data labeling techniques",shortDescription:"YOLOv3-based unmanned store with auto-labeling techniques",longDescription:"This project focused on developing deep learning algorithms to improve object detection and tracking capabilities specifically tailored for unmanned stores. Leveraging YOLOv3, the project addressed challenges like limited human-labeled data by employing innovative techniques such as cut & paste, GP-GAN with content loss, and other augmentation strategies, resulting in enhanced performance and practical applications.",teamRole:"development",diagram:"",tags:["Deep Learning","Object Recognition","YOLOv3","Data Augmentation","GP-GAN"],mainImage:"",team:3,startDate:"2022/1/20",endDate:"2022/5/20",skillset:["YOLOv3","Data Augmentation","GAN"],results:"Achieved 98% mAP by integrating human-labeled and auto-labeled data sets, effectively addressing domain gap issues with GP-GAN and content loss."},{title:"VGG16 Hardware Design with Systolic Array",description:"Designed VGG16 hardware modules with Verilog and improved performance using Systolic Array",shortDescription:"VGG16 hardware design with Systolic Array",longDescription:"This project involved designing three modules for VGG16 hardware: convolution, fully connected, and pooling, using Verilog. After implementing and deploying them on FPGA, the team explored performance enhancement strategies. Transitioning the fully connected module to a Systolic Array-based approach significantly improved performance. The project provided insights into efficient matrix multiplication techniques and hardware optimization.",teamRole:"development",diagram:"",tags:["Hardware Design","VGG16","Verilog","Systolic Array"],mainImage:"",team:3,startDate:"2020/12/1",endDate:"2020/12/30",skillset:["Verilog","VGG","Systolic Array"],results:"Successfully implemented and optimized VGG16 hardware modules with a Systolic Array, achieving significant performance gains."},{title:"American Sign Language Recognition on Nvidia Jetson Board",description:"Developed a deep learning model to recognize American Sign Language using Mediapipe and fully connected layers",shortDescription:"ASL recognition using Mediapipe and fully connected layers",longDescription:"This project focused on creating a deep learning model capable of recognizing American Sign Language (ASL) on Nvidia's Jetson board. The solution included two primary components: data generation and model training. Data generation involved processing input images from A to Z using Mediapipe to extract 20 hand landmarks. The coordinates were normalized relative to the wrist base point and stored as lists. The recognition model utilized three fully connected layers to classify the 20 sets of x, y, z coordinates into 26 alphabets with 98.7% accuracy.",teamRole:"development",diagram:"",tags:["Deep Learning","ASL","Mediapipe","Jetson"],mainImage:"",team:3,startDate:"2021/6/1",endDate:"2021/8/30",skillset:["Mediapipe","Fully Connected Layers","Jetson"],results:"Achieved 98.7% accuracy in recognizing ASL alphabets using a lightweight deep learning model."},{title:"TDD Implementation for Server Stability",description:"Introduced TDD to enhance server stability and enable scalable architecture",shortDescription:"TDD for server stability and microservices migration",longDescription:"This project focused on implementing Test-Driven Development (TDD) to improve server stability during significant architectural changes. The work involved drafting extensible test structures and examples using pytest to minimize errors during migration to a microservices-based system. Additionally, existing codebases were supplemented with test cases, which streamlined the QA process and facilitated automated reliability checks, expediting planned server expansion and stabilization efforts.",teamRole:"individual",diagram:"",tags:["TDD","Server Stability","pytest","Django","DRF"],mainImage:"",team:1,startDate:"2022/4/12",endDate:"2022/5/20",skillset:["TDD","pytest","Django","DRF"],results:"Enabled successful migration to a microservices architecture, reducing unexpected errors and automating QA processes for enhanced server stability."}];export{e as p};
